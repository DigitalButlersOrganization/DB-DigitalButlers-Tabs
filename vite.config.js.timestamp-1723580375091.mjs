// vite.config.js
import { defineConfig } from "file:///C:/DD/DB-DigitalButlers-Tabs/node_modules/.pnpm/vite@3.2.10_sass@1.77.8/node_modules/vite/dist/node/index.js";
import * as sass from "file:///C:/DD/DB-DigitalButlers-Tabs/node_modules/.pnpm/sass@1.77.8/node_modules/sass/sass.node.mjs";
import postcssPresetEnv from "file:///C:/DD/DB-DigitalButlers-Tabs/node_modules/.pnpm/postcss-preset-env@10.0.0_postcss@8.4.41/node_modules/postcss-preset-env/dist/index.mjs";
import fs from "node:fs";
import CleanCSS from "file:///C:/DD/DB-DigitalButlers-Tabs/node_modules/.pnpm/clean-css@5.3.3/node_modules/clean-css/index.js";
import typescript from "file:///C:/DD/DB-DigitalButlers-Tabs/node_modules/.pnpm/@rollup+plugin-typescript@11.1.6_rollup@4.20.0_typescript@4.9.5/node_modules/@rollup/plugin-typescript/dist/es/index.js";
var vite_config_default = defineConfig({
  build: {
    watch: {},
    lib: {
      entry: "./src/index.ts",
      name: "DigitaButlers-Tabs",
      fileName: "index",
      formats: ["es"]
    },
    rollupOptions: {
      output: {
        exports: "named"
      }
    },
    minify: true,
    sourcemap: true
  },
  plugins: [
    typescript({}),
    {
      name: "generate-css-variants",
      writeBundle() {
        const scssContent = fs.readFileSync("src/index.scss", "utf8");
        const cssResult = sass.compile("src/index.scss");
        fs.writeFileSync("dist/styles.scss", scssContent);
        fs.writeFileSync("dist/styles.min.scss", scssContent.replace(/\s+/g, " ").trim());
        fs.writeFileSync("dist/styles.css", cssResult.css);
        const minifier = new CleanCSS();
        const minifiedCss = minifier.minify(cssResult.css).styles;
        fs.writeFileSync("dist/styles.min.css", minifiedCss);
      }
    }
  ],
  css: {
    postcss: {
      plugins: [postcssPresetEnv()]
    }
  },
  server: {
    port: 3e3
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcuanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJDOlxcXFxERFxcXFxEQi1EaWdpdGFsQnV0bGVycy1UYWJzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJDOlxcXFxERFxcXFxEQi1EaWdpdGFsQnV0bGVycy1UYWJzXFxcXHZpdGUuY29uZmlnLmpzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9DOi9ERC9EQi1EaWdpdGFsQnV0bGVycy1UYWJzL3ZpdGUuY29uZmlnLmpzXCI7aW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSAndml0ZSc7XHJcbmltcG9ydCAqIGFzIHNhc3MgZnJvbSAnc2Fzcyc7XHJcbmltcG9ydCBwb3N0Y3NzUHJlc2V0RW52IGZyb20gJ3Bvc3Rjc3MtcHJlc2V0LWVudic7XHJcbmltcG9ydCBmcyBmcm9tICdub2RlOmZzJztcclxuaW1wb3J0IENsZWFuQ1NTIGZyb20gJ2NsZWFuLWNzcyc7XHJcblxyXG5pbXBvcnQgdHlwZXNjcmlwdCBmcm9tICdAcm9sbHVwL3BsdWdpbi10eXBlc2NyaXB0JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XHJcblx0YnVpbGQ6IHtcclxuXHRcdHdhdGNoOiB7fSxcclxuXHRcdGxpYjoge1xyXG5cdFx0XHRlbnRyeTogJy4vc3JjL2luZGV4LnRzJyxcclxuXHRcdFx0bmFtZTogJ0RpZ2l0YUJ1dGxlcnMtVGFicycsXHJcblx0XHRcdGZpbGVOYW1lOiAnaW5kZXgnLFxyXG5cdFx0XHRmb3JtYXRzOiBbJ2VzJ10sXHJcblx0XHR9LFxyXG5cdFx0cm9sbHVwT3B0aW9uczoge1xyXG5cdFx0XHRvdXRwdXQ6IHtcclxuXHRcdFx0XHRleHBvcnRzOiAnbmFtZWQnLFxyXG5cdFx0XHR9LFxyXG5cdFx0fSxcclxuXHRcdG1pbmlmeTogdHJ1ZSxcclxuXHRcdHNvdXJjZW1hcDogdHJ1ZSxcclxuXHR9LFxyXG5cdHBsdWdpbnM6IFtcclxuXHRcdHR5cGVzY3JpcHQoe30pLFxyXG5cdFx0e1xyXG5cdFx0XHRuYW1lOiAnZ2VuZXJhdGUtY3NzLXZhcmlhbnRzJyxcclxuXHRcdFx0d3JpdGVCdW5kbGUoKSB7XHJcblx0XHRcdFx0Y29uc3Qgc2Nzc0NvbnRlbnQgPSBmcy5yZWFkRmlsZVN5bmMoJ3NyYy9pbmRleC5zY3NzJywgJ3V0ZjgnKTtcclxuXHRcdFx0XHRjb25zdCBjc3NSZXN1bHQgPSBzYXNzLmNvbXBpbGUoJ3NyYy9pbmRleC5zY3NzJyk7XHJcblxyXG5cdFx0XHRcdC8vIFx1MDQxN1x1MDQzMFx1MDQzRlx1MDQzOFx1MDQ0MVx1MDQ0Qlx1MDQzMlx1MDQzMFx1MDQzNVx1MDQzQyBTQ1NTIFx1MDQ0NFx1MDQzMFx1MDQzOVx1MDQzQlx1MDQ0QlxyXG5cdFx0XHRcdGZzLndyaXRlRmlsZVN5bmMoJ2Rpc3Qvc3R5bGVzLnNjc3MnLCBzY3NzQ29udGVudCk7XHJcblx0XHRcdFx0ZnMud3JpdGVGaWxlU3luYygnZGlzdC9zdHlsZXMubWluLnNjc3MnLCBzY3NzQ29udGVudC5yZXBsYWNlKC9cXHMrL2csICcgJykudHJpbSgpKTtcclxuXHJcblx0XHRcdFx0Ly8gXHUwNDE3XHUwNDMwXHUwNDNGXHUwNDM4XHUwNDQxXHUwNDRCXHUwNDMyXHUwNDMwXHUwNDM1XHUwNDNDIENTUyBcdTA0NDRcdTA0MzBcdTA0MzlcdTA0M0JcdTA0NEJcclxuXHRcdFx0XHRmcy53cml0ZUZpbGVTeW5jKCdkaXN0L3N0eWxlcy5jc3MnLCBjc3NSZXN1bHQuY3NzKTtcclxuXHJcblx0XHRcdFx0Ly8gXHUwNDFDXHUwNDM4XHUwNDNEXHUwNDM4XHUwNDQ0XHUwNDM4XHUwNDQ2XHUwNDM4XHUwNDQwXHUwNDQzXHUwNDM1XHUwNDNDIENTU1xyXG5cdFx0XHRcdGNvbnN0IG1pbmlmaWVyID0gbmV3IENsZWFuQ1NTKCk7XHJcblx0XHRcdFx0Y29uc3QgbWluaWZpZWRDc3MgPSBtaW5pZmllci5taW5pZnkoY3NzUmVzdWx0LmNzcykuc3R5bGVzO1xyXG5cdFx0XHRcdGZzLndyaXRlRmlsZVN5bmMoJ2Rpc3Qvc3R5bGVzLm1pbi5jc3MnLCBtaW5pZmllZENzcyk7XHJcblx0XHRcdH0sXHJcblx0XHR9LFxyXG5cdF0sXHJcblx0Y3NzOiB7XHJcblx0XHRwb3N0Y3NzOiB7XHJcblx0XHRcdHBsdWdpbnM6IFtwb3N0Y3NzUHJlc2V0RW52KCldLFxyXG5cdFx0fSxcclxuXHR9LFxyXG5cdHNlcnZlcjoge1xyXG5cdFx0cG9ydDogMzAwMCxcclxuXHR9LFxyXG5cdC8vIGJ1aWxkOiB7XHJcblx0Ly8gXHRsb2dMZXZlbDogJ2luZm8nLFxyXG5cdC8vIFx0bWluaWZ5OiBmYWxzZSxcclxuXHQvLyBcdGNzc0NvZGVTcGxpdDogdHJ1ZSxcclxuXHQvLyBcdGxpYjoge1xyXG5cdC8vIFx0XHRlbnRyeTogJy4vc3JjL2luZGV4LnRzJyxcclxuXHQvLyBcdFx0bmFtZTogJ0RpZ2l0YUJ1dGxlcnMtVGFicycsXHJcblx0Ly8gXHRcdGZpbGVOYW1lOiAnRGlnaXRhbEJVdGxlcnMtVGFicycsXHJcblx0Ly8gXHRcdGZvcm1hdHM6IFsnZXMnXSxcclxuXHQvLyBcdH0sXHJcblx0Ly8gXHRyb2xsdXBPcHRpb25zOiB7XHJcblx0Ly8gXHRcdG91dHB1dDoge1xyXG5cdC8vIFx0XHRcdGVudHJ5RmlsZU5hbWVzOiAnaW5kZXguanMnLFxyXG5cdC8vIGFzc2V0RmlsZU5hbWVzOiAoYXNzZXRJbmZvKSA9PiB7XHJcblx0Ly8gICBpZiAoYXNzZXRJbmZvLm5hbWUgPT09ICdzdHlsZS5jc3MnKSByZXR1cm4gJ2luZGV4LmNzcyc7XHJcblx0Ly8gICByZXR1cm4gYXNzZXRJbmZvLm5hbWU7XHJcblx0Ly8gfSxcclxuXHQvLyBlbnRyeUZpbGVOYW1lczogJ1tuYW1lXS9pbmRleC5qcycsXHJcblx0Ly8gY2h1bmtGaWxlTmFtZXM6ICdhc3NldHMvW2hhc2hdLmpzJyxcclxuXHQvLyBhc3NldEZpbGVOYW1lczogKGNodW5rSW5mbykgPT4ge1xyXG5cdC8vIFx0Y29uc3QgYXJyYXlPZkNodW5rcyA9IGNodW5rSW5mby5uYW1lLnNwbGl0KCcvJyk7XHJcblx0Ly8gXHRjb25zdCBjdXJyZW50RmlsZUV4dGVuc2lvbiA9IGFycmF5T2ZDaHVua3NbYXJyYXlPZkNodW5rcy5sZW5ndGggLSAxXS5zcGxpdCgnLicpWzFdO1xyXG5cclxuXHQvLyBcdGlmIChjaHVua0luZm8ubmFtZSAmJiBjaHVua0luZm8udHlwZSA9PT0gJ2Fzc2V0JyAmJiBjdXJyZW50RmlsZUV4dGVuc2lvbiA9PT0gJ2NzcycpIHtcclxuXHQvLyBcdFx0Y29uc3QgY3VycmVudENvbXBvbmVudE5hbWUgPSBhcnJheU9mQ2h1bmtzW2FycmF5T2ZDaHVua3MubGVuZ3RoIC0gMl07XHJcblx0Ly8gXHRcdHJldHVybiBgJHtjdXJyZW50Q29tcG9uZW50TmFtZX0vaW5kZXguY3NzYDtcclxuXHQvLyBcdH1cclxuXHQvLyBcdHJldHVybiAnYXNzZXRzL1tuYW1lXS5bZXh0XSc7XHJcblx0Ly8gfSxcclxuXHQvLyB9LFxyXG5cdC8vIH0sXHJcblx0Ly8gfSxcclxufSk7XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBNFEsU0FBUyxvQkFBb0I7QUFDelMsWUFBWSxVQUFVO0FBQ3RCLE9BQU8sc0JBQXNCO0FBQzdCLE9BQU8sUUFBUTtBQUNmLE9BQU8sY0FBYztBQUVyQixPQUFPLGdCQUFnQjtBQUV2QixJQUFPLHNCQUFRLGFBQWE7QUFBQSxFQUMzQixPQUFPO0FBQUEsSUFDTixPQUFPLENBQUM7QUFBQSxJQUNSLEtBQUs7QUFBQSxNQUNKLE9BQU87QUFBQSxNQUNQLE1BQU07QUFBQSxNQUNOLFVBQVU7QUFBQSxNQUNWLFNBQVMsQ0FBQyxJQUFJO0FBQUEsSUFDZjtBQUFBLElBQ0EsZUFBZTtBQUFBLE1BQ2QsUUFBUTtBQUFBLFFBQ1AsU0FBUztBQUFBLE1BQ1Y7QUFBQSxJQUNEO0FBQUEsSUFDQSxRQUFRO0FBQUEsSUFDUixXQUFXO0FBQUEsRUFDWjtBQUFBLEVBQ0EsU0FBUztBQUFBLElBQ1IsV0FBVyxDQUFDLENBQUM7QUFBQSxJQUNiO0FBQUEsTUFDQyxNQUFNO0FBQUEsTUFDTixjQUFjO0FBQ2IsY0FBTSxjQUFjLEdBQUcsYUFBYSxrQkFBa0IsTUFBTTtBQUM1RCxjQUFNLFlBQWlCLGFBQVEsZ0JBQWdCO0FBRy9DLFdBQUcsY0FBYyxvQkFBb0IsV0FBVztBQUNoRCxXQUFHLGNBQWMsd0JBQXdCLFlBQVksUUFBUSxRQUFRLEdBQUcsRUFBRSxLQUFLLENBQUM7QUFHaEYsV0FBRyxjQUFjLG1CQUFtQixVQUFVLEdBQUc7QUFHakQsY0FBTSxXQUFXLElBQUksU0FBUztBQUM5QixjQUFNLGNBQWMsU0FBUyxPQUFPLFVBQVUsR0FBRyxFQUFFO0FBQ25ELFdBQUcsY0FBYyx1QkFBdUIsV0FBVztBQUFBLE1BQ3BEO0FBQUEsSUFDRDtBQUFBLEVBQ0Q7QUFBQSxFQUNBLEtBQUs7QUFBQSxJQUNKLFNBQVM7QUFBQSxNQUNSLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQztBQUFBLElBQzdCO0FBQUEsRUFDRDtBQUFBLEVBQ0EsUUFBUTtBQUFBLElBQ1AsTUFBTTtBQUFBLEVBQ1A7QUFpQ0QsQ0FBQzsiLAogICJuYW1lcyI6IFtdCn0K
