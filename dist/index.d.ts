import './style.scss';
import { EventDetailsModel, EventsModel, GoToNextPreviousProperties, OrientationType, TabsConfigModel, TriggerEvents } from './interfaces';
export declare class Tabs {
    #private;
    activeIndex: number;
    nextIndex: number | undefined;
    prevIndex: number | undefined;
    lastIndex: number | undefined;
    orientation: OrientationType;
    triggerEvent: TriggerEvents;
    generatedId: string;
    tabsWrapper: HTMLElement;
    tabButtonsList: HTMLElement | undefined;
    tabPanelsList: HTMLElement | undefined;
    tabs: HTMLElement[];
    panels: HTMLElement[];
    on: EventsModel;
    matchMediaRule: string | undefined;
    isInMatchMedia: boolean;
    devMode: boolean;
    constructor(tabsWrapper: string | HTMLElement | undefined, { tabbuttonsListSelector, tabpanelsListSelector, deletableTabs, initialTab, equalHeight, orientation, triggerEvent, autoplay, on, matchMediaRule, devMode: developmentMode, }: TabsConfigModel);
    init(): void;
    setEqualHeight(): void;
    goTo: (index: number, setFocus?: boolean) => void;
    goToNext: (properties?: GoToNextPreviousProperties) => void;
    goToPrev: (properties?: GoToNextPreviousProperties) => void;
    stopAutoPlay: () => void;
    changeTriggerEvent: (eventName: TriggerEvents) => void;
    runAutoPlay(): void;
    addListenersForTabs(): void;
    removeListenersForTabs(): void;
    clickHandler: (event: MouseEvent) => void;
    keydownHandler(event: KeyboardEvent): void;
    protected setUnactiveAll: () => void;
    protected setUnactiveAttributesAll: () => void;
    protected setActiveAttributes: (index: number) => void;
    protected setActiveClasses: (index: number) => void;
    protected focusTab: (order: number) => void;
    switchTabOnArrowPress(eventDetails: EventDetailsModel): void;
    deleteTab(eventDetails: EventDetailsModel): void;
    assignTabsAttributes(): void;
    removeTabsAttributes(): void;
    getEventDetails(event: KeyboardEvent | MouseEvent): EventDetailsModel;
    updateProperties(): void;
    updateAttributes: () => void;
    defineTabsAndPanels(): void;
    private checkMatchMediaRule;
    update: () => void;
    destroy: () => void;
}
