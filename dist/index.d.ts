import './style.scss';
import { EventsModel, OrientationType, TabsConfigModel, TriggerEvents } from './interfaces';
export declare class Tabs {
    #private;
    activeIndex: number;
    nextIndex: number | undefined;
    prevIndex: number | undefined;
    lastIndex: number | undefined;
    orientation: OrientationType;
    triggerEvent: TriggerEvents;
    generatedId: string;
    tabsWrapper: HTMLElement;
    tabButtonsList: HTMLElement | undefined;
    tabPanelsList: HTMLElement | undefined;
    tabs: HTMLElement[];
    panels: HTMLElement[];
    on: EventsModel;
    matchMediaRule: string | undefined;
    isInMatchMedia: boolean;
    devMode: boolean;
    constructor(tabsWrapper: string | HTMLElement | undefined, { tabbuttonsListSelector, tabpanelsListSelector, deletableTabs, initialTab, equalHeight, orientation, triggerEvent, autoplay, on, matchMediaRule, devMode: developmentMode, }: TabsConfigModel);
    init(): void;
    private setEqualHeight;
    goTo: (index: number, setFocus?: boolean) => void;
    goToNext: () => void;
    goToPrev: () => void;
    stopAutoPlay: () => void;
    changeTriggerEvent: (eventName: TriggerEvents) => void;
    private runAutoPlay;
    private addListenersForTabs;
    private removeListenersForTabs;
    private clickHandler;
    private keydownHandler;
    protected setUnactiveAll: () => void;
    protected setUnactiveAttributesAll: () => void;
    protected setActiveAttributes: (index: number) => void;
    protected setActiveClasses: (index: number) => void;
    protected focusTab: (order: number) => void;
    private switchTabOnArrowPress;
    private deleteTab;
    private assignTabsAttributes;
    private removeTabsAttributes;
    private getEventDetails;
    private updateProperties;
    private updateAttributes;
    private defineTabsAndPanels;
    private checkMatchMediaRule;
    update: () => void;
    destroy: () => void;
}
